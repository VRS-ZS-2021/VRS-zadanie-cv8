
vrs_cvicenie_8-demo-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002978  08002978  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002978  08002978  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002978  08002978  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002980  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000010  0800298c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  0800298c  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005811  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000118c  00000000  00000000  0002584d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  000269e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e8  00000000  00000000  00026f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035f1  00000000  00000000  00027448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004adf  00000000  00000000  0002aa39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075be1  00000000  00000000  0002f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a50f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001718  00000000  00000000  000a514c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002948 	.word	0x08002948

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002948 	.word	0x08002948

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa93 f3a3 	rbit	r3, r3
 8000ace:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	fab3 f383 	clz	r3, r3
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2103      	movs	r1, #3
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	fa93 f3a3 	rbit	r3, r3
 8000aec:	61bb      	str	r3, [r7, #24]
  return(result);
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	fab3 f383 	clz	r3, r3
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	431a      	orrs	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	401a      	ands	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	fb01 f303 	mul.w	r3, r1, r3
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	605a      	str	r2, [r3, #4]
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b089      	sub	sp, #36	; 0x24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	fa93 f3a3 	rbit	r3, r3
 8000b58:	613b      	str	r3, [r7, #16]
  return(result);
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	fab3 f383 	clz	r3, r3
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2103      	movs	r1, #3
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	61bb      	str	r3, [r7, #24]
  return(result);
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fab3 f383 	clz	r3, r3
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	431a      	orrs	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000b8c:	bf00      	nop
 8000b8e:	3724      	adds	r7, #36	; 0x24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa93 f3a3 	rbit	r3, r3
 8000bb2:	613b      	str	r3, [r7, #16]
  return(result);
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	fab3 f383 	clz	r3, r3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa93 f3a3 	rbit	r3, r3
 8000bd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	fab3 f383 	clz	r3, r3
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	431a      	orrs	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	60da      	str	r2, [r3, #12]
}
 8000be6:	bf00      	nop
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b089      	sub	sp, #36	; 0x24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6a1a      	ldr	r2, [r3, #32]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	613b      	str	r3, [r7, #16]
  return(result);
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fab3 f383 	clz	r3, r3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	210f      	movs	r1, #15
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	fa93 f3a3 	rbit	r3, r3
 8000c2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fab3 f383 	clz	r3, r3
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000c40:	bf00      	nop
 8000c42:	3724      	adds	r7, #36	; 0x24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa93 f3a3 	rbit	r3, r3
 8000c68:	613b      	str	r3, [r7, #16]
  return(result);
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fab3 f383 	clz	r3, r3
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	210f      	movs	r1, #15
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000c9e:	bf00      	nop
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b088      	sub	sp, #32
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa93 f3a3 	rbit	r3, r3
 8000cc8:	613b      	str	r3, [r7, #16]
  return(result);
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	fab3 f383 	clz	r3, r3
 8000cd0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000cd2:	e048      	b.n	8000d66 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d03a      	beq.n	8000d60 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	69b9      	ldr	r1, [r7, #24]
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fede 	bl	8000ab4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d003      	beq.n	8000d08 <LL_GPIO_Init+0x5e>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d106      	bne.n	8000d16 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	69b9      	ldr	r1, [r7, #24]
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff14 	bl	8000b3e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	69b9      	ldr	r1, [r7, #24]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff3a 	bl	8000b98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d119      	bne.n	8000d60 <LL_GPIO_Init+0xb6>
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d38:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000d3a:	fab3 f383 	clz	r3, r3
 8000d3e:	2b07      	cmp	r3, #7
 8000d40:	d807      	bhi.n	8000d52 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	461a      	mov	r2, r3
 8000d48:	69b9      	ldr	r1, [r7, #24]
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff51 	bl	8000bf2 <LL_GPIO_SetAFPin_0_7>
 8000d50:	e006      	b.n	8000d60 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	461a      	mov	r2, r3
 8000d58:	69b9      	ldr	r1, [r7, #24]
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff76 	bl	8000c4c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	3301      	adds	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1af      	bne.n	8000cd4 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d003      	beq.n	8000d84 <LL_GPIO_Init+0xda>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d107      	bne.n	8000d94 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff febd 	bl	8000b0e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	615a      	str	r2, [r3, #20]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <LL_TIM_Init+0xd4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d007      	beq.n	8000ee8 <LL_TIM_Init+0x2c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ede:	d003      	beq.n	8000ee8 <LL_TIM_Init+0x2c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a2c      	ldr	r2, [pc, #176]	; (8000f94 <LL_TIM_Init+0xd8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d106      	bne.n	8000ef6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <LL_TIM_Init+0xd4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <LL_TIM_Init+0x6a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f04:	d00f      	beq.n	8000f26 <LL_TIM_Init+0x6a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <LL_TIM_Init+0xd8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00b      	beq.n	8000f26 <LL_TIM_Init+0x6a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <LL_TIM_Init+0xdc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <LL_TIM_Init+0x6a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <LL_TIM_Init+0xe0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d003      	beq.n	8000f26 <LL_TIM_Init+0x6a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <LL_TIM_Init+0xe4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d106      	bne.n	8000f34 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff3a 	bl	8000dba <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff26 	bl	8000d9e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LL_TIM_Init+0xd4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00b      	beq.n	8000f72 <LL_TIM_Init+0xb6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <LL_TIM_Init+0xdc>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <LL_TIM_Init+0xb6>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <LL_TIM_Init+0xe0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d003      	beq.n	8000f72 <LL_TIM_Init+0xb6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <LL_TIM_Init+0xe4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d105      	bne.n	8000f7e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	7c1b      	ldrb	r3, [r3, #16]
 8000f76:	4619      	mov	r1, r3
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff2c 	bl	8000dd6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff8b 	bl	8000e9a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40012c00 	.word	0x40012c00
 8000f94:	40000400 	.word	0x40000400
 8000f98:	40014000 	.word	0x40014000
 8000f9c:	40014400 	.word	0x40014400
 8000fa0:	40014800 	.word	0x40014800

08000fa4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000fba:	d045      	beq.n	8001048 <LL_TIM_OC_Init+0xa4>
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000fc2:	d848      	bhi.n	8001056 <LL_TIM_OC_Init+0xb2>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d036      	beq.n	800103a <LL_TIM_OC_Init+0x96>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd2:	d840      	bhi.n	8001056 <LL_TIM_OC_Init+0xb2>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fda:	d027      	beq.n	800102c <LL_TIM_OC_Init+0x88>
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fe2:	d838      	bhi.n	8001056 <LL_TIM_OC_Init+0xb2>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fea:	d018      	beq.n	800101e <LL_TIM_OC_Init+0x7a>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff2:	d830      	bhi.n	8001056 <LL_TIM_OC_Init+0xb2>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d003      	beq.n	8001002 <LL_TIM_OC_Init+0x5e>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b10      	cmp	r3, #16
 8000ffe:	d007      	beq.n	8001010 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001000:	e029      	b.n	8001056 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 f82d 	bl	8001064 <OC1Config>
 800100a:	4603      	mov	r3, r0
 800100c:	75fb      	strb	r3, [r7, #23]
      break;
 800100e:	e023      	b.n	8001058 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f8a6 	bl	8001164 <OC2Config>
 8001018:	4603      	mov	r3, r0
 800101a:	75fb      	strb	r3, [r7, #23]
      break;
 800101c:	e01c      	b.n	8001058 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 f923 	bl	800126c <OC3Config>
 8001026:	4603      	mov	r3, r0
 8001028:	75fb      	strb	r3, [r7, #23]
      break;
 800102a:	e015      	b.n	8001058 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f9a0 	bl	8001374 <OC4Config>
 8001034:	4603      	mov	r3, r0
 8001036:	75fb      	strb	r3, [r7, #23]
      break;
 8001038:	e00e      	b.n	8001058 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fa05 	bl	800144c <OC5Config>
 8001042:	4603      	mov	r3, r0
 8001044:	75fb      	strb	r3, [r7, #23]
      break;
 8001046:	e007      	b.n	8001058 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 fa60 	bl	8001510 <OC6Config>
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
      break;
 8001054:	e000      	b.n	8001058 <LL_TIM_OC_Init+0xb4>
      break;
 8001056:	bf00      	nop
  }

  return result;
 8001058:	7dfb      	ldrb	r3, [r7, #23]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	f023 0201 	bic.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f023 0202 	bic.w	r2, r3, #2
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f023 0201 	bic.w	r2, r3, #1
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <OC1Config+0xf0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00b      	beq.n	80010ee <OC1Config+0x8a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <OC1Config+0xf4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <OC1Config+0x8a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <OC1Config+0xf8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d003      	beq.n	80010ee <OC1Config+0x8a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <OC1Config+0xfc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d11e      	bne.n	800112c <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f023 0208 	bic.w	r2, r3, #8
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4313      	orrs	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f023 0204 	bic.w	r2, r3, #4
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4313      	orrs	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4619      	mov	r1, r3
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fe57 	bl	8000df2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40012c00 	.word	0x40012c00
 8001158:	40014000 	.word	0x40014000
 800115c:	40014400 	.word	0x40014400
 8001160:	40014800 	.word	0x40014800

08001164 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	f023 0210 	bic.w	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800119e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	0212      	lsls	r2, r2, #8
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f023 0220 	bic.w	r2, r3, #32
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4313      	orrs	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f023 0210 	bic.w	r2, r3, #16
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <OC2Config+0xf8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00b      	beq.n	80011f4 <OC2Config+0x90>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a20      	ldr	r2, [pc, #128]	; (8001260 <OC2Config+0xfc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <OC2Config+0x90>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <OC2Config+0x100>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d003      	beq.n	80011f4 <OC2Config+0x90>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <OC2Config+0x104>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d11f      	bne.n	8001234 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	019b      	lsls	r3, r3, #6
 8001200:	4313      	orrs	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	019b      	lsls	r3, r3, #6
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fde1 	bl	8000e0e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40012c00 	.word	0x40012c00
 8001260:	40014000 	.word	0x40014000
 8001264:	40014400 	.word	0x40014400
 8001268:	40014800 	.word	0x40014800

0800126c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f023 0303 	bic.w	r3, r3, #3
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4313      	orrs	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <OC3Config+0xf8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00b      	beq.n	80012fa <OC3Config+0x8e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a20      	ldr	r2, [pc, #128]	; (8001368 <OC3Config+0xfc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <OC3Config+0x8e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a1f      	ldr	r2, [pc, #124]	; (800136c <OC3Config+0x100>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d003      	beq.n	80012fa <OC3Config+0x8e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <OC3Config+0x104>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d11f      	bne.n	800133a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4313      	orrs	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4313      	orrs	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fd6c 	bl	8000e2a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40012c00 	.word	0x40012c00
 8001368:	40014000 	.word	0x40014000
 800136c:	40014400 	.word	0x40014400
 8001370:	40014800 	.word	0x40014800

08001374 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013ae:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	0212      	lsls	r2, r2, #8
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	031b      	lsls	r3, r3, #12
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	031b      	lsls	r3, r3, #12
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <OC4Config+0xc8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00b      	beq.n	8001404 <OC4Config+0x90>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a14      	ldr	r2, [pc, #80]	; (8001440 <OC4Config+0xcc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <OC4Config+0x90>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <OC4Config+0xd0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d003      	beq.n	8001404 <OC4Config+0x90>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <OC4Config+0xd4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d107      	bne.n	8001414 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	019b      	lsls	r3, r3, #6
 8001410:	4313      	orrs	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fd0d 	bl	8000e46 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40012c00 	.word	0x40012c00
 8001440:	40014000 	.word	0x40014000
 8001444:	40014400 	.word	0x40014400
 8001448:	40014800 	.word	0x40014800

0800144c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001474:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	4313      	orrs	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <OC5Config+0xb4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00b      	beq.n	80014c8 <OC5Config+0x7c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <OC5Config+0xb8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d007      	beq.n	80014c8 <OC5Config+0x7c>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <OC5Config+0xbc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d003      	beq.n	80014c8 <OC5Config+0x7c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <OC5Config+0xc0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d109      	bne.n	80014dc <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fcba 	bl	8000e62 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40014000 	.word	0x40014000
 8001508:	40014400 	.word	0x40014400
 800150c:	40014800 	.word	0x40014800

08001510 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	0212      	lsls	r2, r2, #8
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	051b      	lsls	r3, r3, #20
 800155a:	4313      	orrs	r3, r2
 800155c:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	051b      	lsls	r3, r3, #20
 800156a:	4313      	orrs	r3, r2
 800156c:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <OC6Config+0xb4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00b      	beq.n	800158e <OC6Config+0x7e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <OC6Config+0xb8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <OC6Config+0x7e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <OC6Config+0xbc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d003      	beq.n	800158e <OC6Config+0x7e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <OC6Config+0xc0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d109      	bne.n	80015a2 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fc65 	bl	8000e7e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40012c00 	.word	0x40012c00
 80015c8:	40014000 	.word	0x40014000
 80015cc:	40014400 	.word	0x40014400
 80015d0:	40014800 	.word	0x40014800

080015d4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <LL_InitTick+0x30>)
 80015e8:	3b01      	subs	r3, #1
 80015ea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <LL_InitTick+0x30>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <LL_InitTick+0x30>)
 80015f4:	2205      	movs	r2, #5
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e010 	.word	0xe000e010

08001608 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ffdd 	bl	80015d4 <LL_InitTick>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <LL_mDelay+0x48>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001632:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163a:	d00c      	beq.n	8001656 <LL_mDelay+0x32>
  {
    Delay++;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3301      	adds	r3, #1
 8001640:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001642:	e008      	b.n	8001656 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <LL_mDelay+0x48>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <LL_mDelay+0x32>
    {
      Delay--;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f3      	bne.n	8001644 <LL_mDelay+0x20>
    }
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <LL_SetSystemCoreClock+0x1c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008

08001690 <LL_TIM_ClearFlag_UPDATE>:
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f06f 0201 	mvn.w	r2, #1
 800169e:	611a      	str	r2, [r3, #16]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_TIM_IsActiveFlag_UPDATE>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b01      	cmp	r3, #1
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f7ff ffdb 	bl	80016d2 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800171c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001724:	f7ff ffd5 	bl	80016d2 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001728:	2102      	movs	r1, #2
 800172a:	480e      	ldr	r0, [pc, #56]	; (8001764 <resetSegments+0x58>)
 800172c:	f7ff ffd1 	bl	80016d2 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001730:	2120      	movs	r1, #32
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <resetSegments+0x58>)
 8001734:	f7ff ffcd 	bl	80016d2 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001738:	2110      	movs	r1, #16
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <resetSegments+0x58>)
 800173c:	f7ff ffc9 	bl	80016d2 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001740:	2101      	movs	r1, #1
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f7ff ffc4 	bl	80016d2 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800174a:	2102      	movs	r1, #2
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f7ff ffbf 	bl	80016d2 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001754:	2108      	movs	r1, #8
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f7ff ffba 	bl	80016d2 <LL_GPIO_SetOutputPin>
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	48000400 	.word	0x48000400

08001768 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800176c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f7ff ffbb 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f7ff ffb5 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001784:	2102      	movs	r1, #2
 8001786:	480e      	ldr	r0, [pc, #56]	; (80017c0 <setSegments+0x58>)
 8001788:	f7ff ffb1 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800178c:	2120      	movs	r1, #32
 800178e:	480c      	ldr	r0, [pc, #48]	; (80017c0 <setSegments+0x58>)
 8001790:	f7ff ffad 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001794:	2110      	movs	r1, #16
 8001796:	480a      	ldr	r0, [pc, #40]	; (80017c0 <setSegments+0x58>)
 8001798:	f7ff ffa9 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800179c:	2101      	movs	r1, #1
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f7ff ffa4 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 80017a6:	2102      	movs	r1, #2
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ac:	f7ff ff9f 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80017b0:	2108      	movs	r1, #8
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f7ff ff9a 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	48000400 	.word	0x48000400

080017c4 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80017c8:	2104      	movs	r1, #4
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f7ff ff8e 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80017d2:	2120      	movs	r1, #32
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f7ff ff89 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80017dc:	2110      	movs	r1, #16
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f7ff ff84 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f7ff ff7f 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f7ff ff7a 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}

080017fe <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001802:	2120      	movs	r1, #32
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f7ff ff63 	bl	80016d2 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 800180c:	2110      	movs	r1, #16
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f7ff ff5e 	bl	80016d2 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f7ff ff59 	bl	80016d2 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001820:	2104      	movs	r1, #4
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f7ff ff54 	bl	80016d2 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f7ff ff4f 	bl	80016d2 <LL_GPIO_SetOutputPin>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <setDecimalPoint>:

void setDecimalPoint(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 800183c:	2102      	movs	r1, #2
 800183e:	4802      	ldr	r0, [pc, #8]	; (8001848 <setDecimalPoint+0x10>)
 8001840:	f7ff ff55 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	48000400 	.word	0x48000400

0800184c <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001850:	2101      	movs	r1, #1
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f7ff ff4a 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800185a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f7ff ff44 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <setTwo>:

void setTwo(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001870:	2101      	movs	r1, #1
 8001872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001876:	f7ff ff3a 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800187a:	2102      	movs	r1, #2
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f7ff ff35 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001884:	2110      	movs	r1, #16
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <setTwo+0x38>)
 8001888:	f7ff ff31 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800188c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f7ff ff2b 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001898:	2120      	movs	r1, #32
 800189a:	4802      	ldr	r0, [pc, #8]	; (80018a4 <setTwo+0x38>)
 800189c:	f7ff ff27 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	48000400 	.word	0x48000400

080018a8 <setThree>:

void setThree(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80018ac:	2101      	movs	r1, #1
 80018ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b2:	f7ff ff1c 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80018b6:	2102      	movs	r1, #2
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f7ff ff17 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80018c0:	2110      	movs	r1, #16
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <setThree+0x38>)
 80018c4:	f7ff ff13 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80018c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f7ff ff0d 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80018d4:	2120      	movs	r1, #32
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <setThree+0x38>)
 80018d8:	f7ff ff09 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	48000400 	.word	0x48000400

080018e4 <setFour>:

void setFour(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80018e8:	2108      	movs	r1, #8
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f7ff fefe 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80018f2:	2101      	movs	r1, #1
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f7ff fef9 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80018fc:	2110      	movs	r1, #16
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <setFour+0x30>)
 8001900:	f7ff fef5 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f7ff feef 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	48000400 	.word	0x48000400

08001918 <setFive>:

void setFive(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800191c:	2108      	movs	r1, #8
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f7ff fee4 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001926:	2120      	movs	r1, #32
 8001928:	4809      	ldr	r0, [pc, #36]	; (8001950 <setFive+0x38>)
 800192a:	f7ff fee0 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800192e:	2110      	movs	r1, #16
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <setFive+0x38>)
 8001932:	f7ff fedc 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f7ff fed6 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001942:	2102      	movs	r1, #2
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f7ff fed1 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400

08001954 <setSix>:

void setSix(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001958:	2108      	movs	r1, #8
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f7ff fec6 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001962:	2120      	movs	r1, #32
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <setSix+0x44>)
 8001966:	f7ff fec2 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800196a:	2110      	movs	r1, #16
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <setSix+0x44>)
 800196e:	f7ff febe 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f7ff feb8 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800197e:	2102      	movs	r1, #2
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f7ff feb3 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001988:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f7ff fead 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	48000400 	.word	0x48000400

0800199c <setSeven>:

void setSeven(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80019a0:	2101      	movs	r1, #1
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a6:	f7ff fea2 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80019aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b2:	f7ff fe9c 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80019b6:	2102      	movs	r1, #2
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f7ff fe97 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <setEight>:

void setEight(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80019c8:	2108      	movs	r1, #8
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f7ff fe8e 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80019d2:	2120      	movs	r1, #32
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <setEight+0x50>)
 80019d6:	f7ff fe8a 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80019da:	2110      	movs	r1, #16
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <setEight+0x50>)
 80019de:	f7ff fe86 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80019e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f7ff fe80 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80019ee:	2102      	movs	r1, #2
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f7ff fe7b 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80019f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a00:	f7ff fe75 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a04:	2101      	movs	r1, #1
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f7ff fe70 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	48000400 	.word	0x48000400

08001a18 <setNine>:

void setNine(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a22:	f7ff fe64 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f7ff fe5e 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001a32:	2102      	movs	r1, #2
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f7ff fe59 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <setNine+0x3c>)
 8001a40:	f7ff fe55 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001a44:	2108      	movs	r1, #8
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f7ff fe50 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	48000400 	.word	0x48000400

08001a58 <setZero>:

void setZero(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a62:	f7ff fe44 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001a66:	2120      	movs	r1, #32
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <setZero+0x48>)
 8001a6a:	f7ff fe40 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a76:	f7ff fe3a 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a80:	f7ff fe35 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8c:	f7ff fe2f 	bl	80016ee <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001a90:	2101      	movs	r1, #1
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f7ff fe2a 	bl	80016ee <LL_GPIO_ResetOutputPin>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <displayNumber>:

/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayNumber(double num)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0b00 	vstr	d0, [r7]
	uint8_t i = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]

	if(num < 0) return;
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ac2:	f7fe ffaf 	bl	8000a24 <__aeabi_dcmplt>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 8170 	bne.w	8001dae <displayNumber+0x306>

	if(num > 9999)
 8001ace:	a3c0      	add	r3, pc, #768	; (adr r3, 8001dd0 <displayNumber+0x328>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ad8:	f7fe ffc2 	bl	8000a60 <__aeabi_dcmpgt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <displayNumber+0x4e>
	{
		dDisplayData.digit_num = 4;
 8001ae2:	4bb5      	ldr	r3, [pc, #724]	; (8001db8 <displayNumber+0x310>)
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	711a      	strb	r2, [r3, #4]
		dDisplayData.negative = 0;
 8001ae8:	4bb3      	ldr	r3, [pc, #716]	; (8001db8 <displayNumber+0x310>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	715a      	strb	r2, [r3, #5]
		dDisplayData.resolution = 0;
 8001aee:	4bb2      	ldr	r3, [pc, #712]	; (8001db8 <displayNumber+0x310>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	719a      	strb	r2, [r3, #6]
 8001af4:	e15c      	b.n	8001db0 <displayNumber+0x308>
	}
	else if(num >= 1000)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4bb0      	ldr	r3, [pc, #704]	; (8001dbc <displayNumber+0x314>)
 8001afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b00:	f7fe ffa4 	bl	8000a4c <__aeabi_dcmpge>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d031      	beq.n	8001b6e <displayNumber+0xc6>
	{
		dDisplayData.digit_num = 4;
 8001b0a:	4bab      	ldr	r3, [pc, #684]	; (8001db8 <displayNumber+0x310>)
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	711a      	strb	r2, [r3, #4]
		dDisplayData.resolution = 0;
 8001b10:	4ba9      	ldr	r3, [pc, #676]	; (8001db8 <displayNumber+0x310>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	719a      	strb	r2, [r3, #6]

	    while(num > 1)
 8001b16:	e01f      	b.n	8001b58 <displayNumber+0xb0>
	    {
	    	dDisplayData.digit[i] = (uint32_t)num % 10;
 8001b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b1c:	f7fe ffaa 	bl	8000a74 <__aeabi_d2uiz>
 8001b20:	4601      	mov	r1, r0
 8001b22:	4ba7      	ldr	r3, [pc, #668]	; (8001dc0 <displayNumber+0x318>)
 8001b24:	fba3 2301 	umull	r2, r3, r3, r1
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	1aca      	subs	r2, r1, r3
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	b2d1      	uxtb	r1, r2
 8001b38:	4a9f      	ldr	r2, [pc, #636]	; (8001db8 <displayNumber+0x310>)
 8001b3a:	54d1      	strb	r1, [r2, r3]
	        num = num / 10;
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4ba0      	ldr	r3, [pc, #640]	; (8001dc4 <displayNumber+0x31c>)
 8001b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b46:	f7fe fe25 	bl	8000794 <__aeabi_ddiv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	e9c7 2300 	strd	r2, r3, [r7]
	        i++;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3301      	adds	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
	    while(num > 1)
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b9a      	ldr	r3, [pc, #616]	; (8001dc8 <displayNumber+0x320>)
 8001b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b62:	f7fe ff7d 	bl	8000a60 <__aeabi_dcmpgt>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1d5      	bne.n	8001b18 <displayNumber+0x70>
 8001b6c:	e120      	b.n	8001db0 <displayNumber+0x308>
	    }
	}
	else if(num >= 100)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b96      	ldr	r3, [pc, #600]	; (8001dcc <displayNumber+0x324>)
 8001b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b78:	f7fe ff68 	bl	8000a4c <__aeabi_dcmpge>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03c      	beq.n	8001bfc <displayNumber+0x154>
	{
		dDisplayData.digit_num = 3;
 8001b82:	4b8d      	ldr	r3, [pc, #564]	; (8001db8 <displayNumber+0x310>)
 8001b84:	2203      	movs	r2, #3
 8001b86:	711a      	strb	r2, [r3, #4]
		dDisplayData.resolution = 1;
 8001b88:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <displayNumber+0x310>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	719a      	strb	r2, [r3, #6]

		num = num * 10;
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b8c      	ldr	r3, [pc, #560]	; (8001dc4 <displayNumber+0x31c>)
 8001b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b98:	f7fe fcd2 	bl	8000540 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	e9c7 2300 	strd	r2, r3, [r7]

	    while(num > 1)
 8001ba4:	e01f      	b.n	8001be6 <displayNumber+0x13e>
	    {
	    	dDisplayData.digit[i] = (uint32_t)num % 10;
 8001ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001baa:	f7fe ff63 	bl	8000a74 <__aeabi_d2uiz>
 8001bae:	4601      	mov	r1, r0
 8001bb0:	4b83      	ldr	r3, [pc, #524]	; (8001dc0 <displayNumber+0x318>)
 8001bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	1aca      	subs	r2, r1, r3
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	b2d1      	uxtb	r1, r2
 8001bc6:	4a7c      	ldr	r2, [pc, #496]	; (8001db8 <displayNumber+0x310>)
 8001bc8:	54d1      	strb	r1, [r2, r3]
	        num = num / 10;
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <displayNumber+0x31c>)
 8001bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd4:	f7fe fdde 	bl	8000794 <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2300 	strd	r2, r3, [r7]
	        i++;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	3301      	adds	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
	    while(num > 1)
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b77      	ldr	r3, [pc, #476]	; (8001dc8 <displayNumber+0x320>)
 8001bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf0:	f7fe ff36 	bl	8000a60 <__aeabi_dcmpgt>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1d5      	bne.n	8001ba6 <displayNumber+0xfe>
 8001bfa:	e0d9      	b.n	8001db0 <displayNumber+0x308>
	    }
	}
	else if(num >= 10)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <displayNumber+0x31c>)
 8001c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c06:	f7fe ff21 	bl	8000a4c <__aeabi_dcmpge>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d03c      	beq.n	8001c8a <displayNumber+0x1e2>
	{
		dDisplayData.digit_num = 2;
 8001c10:	4b69      	ldr	r3, [pc, #420]	; (8001db8 <displayNumber+0x310>)
 8001c12:	2202      	movs	r2, #2
 8001c14:	711a      	strb	r2, [r3, #4]
		dDisplayData.resolution = 2;
 8001c16:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <displayNumber+0x310>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	719a      	strb	r2, [r3, #6]

		num = num * 100;
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <displayNumber+0x324>)
 8001c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c26:	f7fe fc8b 	bl	8000540 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2300 	strd	r2, r3, [r7]

	    while(num > 1)
 8001c32:	e01f      	b.n	8001c74 <displayNumber+0x1cc>
	    {
	    	dDisplayData.digit[i] = (uint32_t)num % 10;
 8001c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c38:	f7fe ff1c 	bl	8000a74 <__aeabi_d2uiz>
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	4b60      	ldr	r3, [pc, #384]	; (8001dc0 <displayNumber+0x318>)
 8001c40:	fba3 2301 	umull	r2, r3, r3, r1
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	1aca      	subs	r2, r1, r3
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	b2d1      	uxtb	r1, r2
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <displayNumber+0x310>)
 8001c56:	54d1      	strb	r1, [r2, r3]
	        num = num / 10;
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <displayNumber+0x31c>)
 8001c5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c62:	f7fe fd97 	bl	8000794 <__aeabi_ddiv>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 2300 	strd	r2, r3, [r7]
	        i++;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
	    while(num > 1)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <displayNumber+0x320>)
 8001c7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c7e:	f7fe feef 	bl	8000a60 <__aeabi_dcmpgt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1d5      	bne.n	8001c34 <displayNumber+0x18c>
 8001c88:	e092      	b.n	8001db0 <displayNumber+0x308>
	    }
	}
	else if(num >= 1)
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <displayNumber+0x320>)
 8001c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c94:	f7fe feda 	bl	8000a4c <__aeabi_dcmpge>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d03c      	beq.n	8001d18 <displayNumber+0x270>
	{
		dDisplayData.digit_num = 1;
 8001c9e:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <displayNumber+0x310>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	711a      	strb	r2, [r3, #4]
		dDisplayData.resolution = 3;
 8001ca4:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <displayNumber+0x310>)
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	719a      	strb	r2, [r3, #6]

		num = num * 1000;
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <displayNumber+0x314>)
 8001cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb4:	f7fe fc44 	bl	8000540 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2300 	strd	r2, r3, [r7]

	    while(num > 1)
 8001cc0:	e01f      	b.n	8001d02 <displayNumber+0x25a>
	    {
	    	dDisplayData.digit[i] = (uint32_t)num % 10;
 8001cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc6:	f7fe fed5 	bl	8000a74 <__aeabi_d2uiz>
 8001cca:	4601      	mov	r1, r0
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <displayNumber+0x318>)
 8001cce:	fba3 2301 	umull	r2, r3, r3, r1
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	1aca      	subs	r2, r1, r3
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	b2d1      	uxtb	r1, r2
 8001ce2:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <displayNumber+0x310>)
 8001ce4:	54d1      	strb	r1, [r2, r3]
	        num = num / 10;
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <displayNumber+0x31c>)
 8001cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf0:	f7fe fd50 	bl	8000794 <__aeabi_ddiv>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	e9c7 2300 	strd	r2, r3, [r7]
	        i++;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
	    while(num > 1)
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <displayNumber+0x320>)
 8001d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d0c:	f7fe fea8 	bl	8000a60 <__aeabi_dcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1d5      	bne.n	8001cc2 <displayNumber+0x21a>
 8001d16:	e04b      	b.n	8001db0 <displayNumber+0x308>
	    }
	}
	else if(num >= 0)
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d24:	f7fe fe92 	bl	8000a4c <__aeabi_dcmpge>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d040      	beq.n	8001db0 <displayNumber+0x308>
	{
		dDisplayData.digit_num = 1;
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <displayNumber+0x310>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	711a      	strb	r2, [r3, #4]
		dDisplayData.resolution = 3;
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <displayNumber+0x310>)
 8001d36:	2203      	movs	r2, #3
 8001d38:	719a      	strb	r2, [r3, #6]

		num = num * 1000;
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <displayNumber+0x314>)
 8001d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d44:	f7fe fbfc 	bl	8000540 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	e9c7 2300 	strd	r2, r3, [r7]
		dDisplayData.digit[3] = 0;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <displayNumber+0x310>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	70da      	strb	r2, [r3, #3]

	    while(num > 1)
 8001d56:	e01f      	b.n	8001d98 <displayNumber+0x2f0>
	    {
	    	dDisplayData.digit[i] = (uint32_t)num % 10;
 8001d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d5c:	f7fe fe8a 	bl	8000a74 <__aeabi_d2uiz>
 8001d60:	4601      	mov	r1, r0
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <displayNumber+0x318>)
 8001d64:	fba3 2301 	umull	r2, r3, r3, r1
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	1aca      	subs	r2, r1, r3
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	b2d1      	uxtb	r1, r2
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <displayNumber+0x310>)
 8001d7a:	54d1      	strb	r1, [r2, r3]
	        num = num / 10;
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <displayNumber+0x31c>)
 8001d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d86:	f7fe fd05 	bl	8000794 <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9c7 2300 	strd	r2, r3, [r7]
	        i++;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	3301      	adds	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
	    while(num > 1)
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <displayNumber+0x320>)
 8001d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001da2:	f7fe fe5d 	bl	8000a60 <__aeabi_dcmpgt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1d5      	bne.n	8001d58 <displayNumber+0x2b0>
 8001dac:	e000      	b.n	8001db0 <displayNumber+0x308>
	if(num < 0) return;
 8001dae:	bf00      	nop
	    }
	}
}
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000002c 	.word	0x2000002c
 8001dbc:	408f4000 	.word	0x408f4000
 8001dc0:	cccccccd 	.word	0xcccccccd
 8001dc4:	40240000 	.word	0x40240000
 8001dc8:	3ff00000 	.word	0x3ff00000
 8001dcc:	40590000 	.word	0x40590000
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40c38780 	.word	0x40c38780

08001dd8 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d823      	bhi.n	8001e30 <setDigit+0x58>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <setDigit+0x18>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e01 	.word	0x08001e01
 8001df4:	08001e0d 	.word	0x08001e0d
 8001df8:	08001e19 	.word	0x08001e19
 8001dfc:	08001e25 	.word	0x08001e25
	{
		case 0:
			DIGIT_4_ON;
 8001e00:	2104      	movs	r1, #4
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f7ff fc64 	bl	80016d2 <LL_GPIO_SetOutputPin>
			break;
 8001e0a:	e011      	b.n	8001e30 <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f7ff fc5e 	bl	80016d2 <LL_GPIO_SetOutputPin>
			break;
 8001e16:	e00b      	b.n	8001e30 <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 8001e18:	2110      	movs	r1, #16
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f7ff fc58 	bl	80016d2 <LL_GPIO_SetOutputPin>
			break;
 8001e22:	e005      	b.n	8001e30 <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 8001e24:	2120      	movs	r1, #32
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2a:	f7ff fc52 	bl	80016d2 <LL_GPIO_SetOutputPin>
			break;
 8001e2e:	bf00      	nop
	}
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	e083      	b.n	8001f4c <updateDisplay+0x114>
	{
		switch(dDisplayData.digit[i])
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <updateDisplay+0x128>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	2b09      	cmp	r3, #9
 8001e4c:	d85c      	bhi.n	8001f08 <updateDisplay+0xd0>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <updateDisplay+0x1c>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e7d 	.word	0x08001e7d
 8001e58:	08001e8b 	.word	0x08001e8b
 8001e5c:	08001e99 	.word	0x08001e99
 8001e60:	08001ea7 	.word	0x08001ea7
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	08001ec3 	.word	0x08001ec3
 8001e6c:	08001ed1 	.word	0x08001ed1
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001eed 	.word	0x08001eed
 8001e78:	08001efb 	.word	0x08001efb
		{
			case 0:
			  setDigit(i);
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ffaa 	bl	8001dd8 <setDigit>
			  setZero();
 8001e84:	f7ff fde8 	bl	8001a58 <setZero>
			  break;
 8001e88:	e03e      	b.n	8001f08 <updateDisplay+0xd0>
			case 1:
			  setDigit(i);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ffa3 	bl	8001dd8 <setDigit>
			  setOne();
 8001e92:	f7ff fcdb 	bl	800184c <setOne>
			  break;
 8001e96:	e037      	b.n	8001f08 <updateDisplay+0xd0>
			case 2:
			  setDigit(i);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff9c 	bl	8001dd8 <setDigit>
			  setTwo();
 8001ea0:	f7ff fce4 	bl	800186c <setTwo>
			  break;
 8001ea4:	e030      	b.n	8001f08 <updateDisplay+0xd0>
			case 3:
			  setDigit(i);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff95 	bl	8001dd8 <setDigit>
			  setThree();
 8001eae:	f7ff fcfb 	bl	80018a8 <setThree>
			  break;
 8001eb2:	e029      	b.n	8001f08 <updateDisplay+0xd0>
			case 4:
			  setDigit(i);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff8e 	bl	8001dd8 <setDigit>
			  setFour();
 8001ebc:	f7ff fd12 	bl	80018e4 <setFour>
			  break;
 8001ec0:	e022      	b.n	8001f08 <updateDisplay+0xd0>
			case 5:
			  setDigit(i);
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff87 	bl	8001dd8 <setDigit>
			  setFive();
 8001eca:	f7ff fd25 	bl	8001918 <setFive>
			  break;
 8001ece:	e01b      	b.n	8001f08 <updateDisplay+0xd0>
			case 6:
			  setDigit(i);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff80 	bl	8001dd8 <setDigit>
			  setSix();
 8001ed8:	f7ff fd3c 	bl	8001954 <setSix>
			  break;
 8001edc:	e014      	b.n	8001f08 <updateDisplay+0xd0>
			case 7:
			  setDigit(i);
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff79 	bl	8001dd8 <setDigit>
			  setSeven();
 8001ee6:	f7ff fd59 	bl	800199c <setSeven>
			  break;
 8001eea:	e00d      	b.n	8001f08 <updateDisplay+0xd0>
			case 8:
			  setDigit(i);
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff72 	bl	8001dd8 <setDigit>
			  setEight();
 8001ef4:	f7ff fd66 	bl	80019c4 <setEight>
			  break;
 8001ef8:	e006      	b.n	8001f08 <updateDisplay+0xd0>
			case 9:
			  setDigit(i);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff6b 	bl	8001dd8 <setDigit>
			  setNine();
 8001f02:	f7ff fd89 	bl	8001a18 <setNine>
			  break;
 8001f06:	bf00      	nop
		}

		if(dDisplayData.resolution == i)
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <updateDisplay+0x128>)
 8001f0a:	799b      	ldrb	r3, [r3, #6]
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d101      	bne.n	8001f16 <updateDisplay+0xde>
		{
			setDecimalPoint();
 8001f12:	f7ff fc91 	bl	8001838 <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <updateDisplay+0x12c>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	4912      	ldr	r1, [pc, #72]	; (8001f68 <updateDisplay+0x130>)
 8001f1e:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8001f22:	bf00      	nop
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <updateDisplay+0x130>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	1c94      	adds	r4, r2, #2
 8001f2c:	f143 0500 	adc.w	r5, r3, #0
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <updateDisplay+0x12c>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	42ab      	cmp	r3, r5
 8001f38:	bf08      	it	eq
 8001f3a:	42a2      	cmpeq	r2, r4
 8001f3c:	d3f2      	bcc.n	8001f24 <updateDisplay+0xec>

		resetDigits();
 8001f3e:	f7ff fc41 	bl	80017c4 <resetDigits>
		resetSegments();
 8001f42:	f7ff fbe3 	bl	800170c <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	f67f af78 	bls.w	8001e44 <updateDisplay+0xc>
	}
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000002c 	.word	0x2000002c
 8001f64:	20000038 	.word	0x20000038
 8001f68:	20000040 	.word	0x20000040

08001f6c <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <TIM3_IRQHandler+0x20>)
 8001f72:	f7ff fb9b 	bl	80016ac <LL_TIM_IsActiveFlag_UPDATE>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8001f7c:	f7ff ff5c 	bl	8001e38 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <TIM3_IRQHandler+0x20>)
 8001f82:	f7ff fb85 	bl	8001690 <LL_TIM_ClearFlag_UPDATE>
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40000400 	.word	0x40000400

08001f90 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4013      	ands	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <LL_GPIO_ResetOutputPin>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
 8001ff0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ff2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ff6:	f7ff ffcb 	bl	8001f90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ffa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ffe:	f7ff ffc7 	bl	8001f90 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8002002:	f640 111b 	movw	r1, #2331	; 0x91b
 8002006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200a:	f7ff ffd9 	bl	8001fc0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 800200e:	2132      	movs	r1, #50	; 0x32
 8002010:	4813      	ldr	r0, [pc, #76]	; (8002060 <MX_GPIO_Init+0x84>)
 8002012:	f7ff ffd5 	bl	8001fc0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8002016:	f640 13ff 	movw	r3, #2559	; 0x9ff
 800201a:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800201c:	2301      	movs	r3, #1
 800201e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	463b      	mov	r3, r7
 800202e:	4619      	mov	r1, r3
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f7fe fe39 	bl	8000caa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002038:	2332      	movs	r3, #50	; 0x32
 800203a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800203c:	2301      	movs	r3, #1
 800203e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <MX_GPIO_Init+0x84>)
 8002052:	f7fe fe2a 	bl	8000caa <LL_GPIO_Init>

}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	48000400 	.word	0x48000400

08002064 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <LL_RCC_HSI_Enable+0x1c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <LL_RCC_HSI_Enable+0x1c>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000

080020cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <LL_RCC_HSI_IsReady+0x20>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000

080020f0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4904      	ldr	r1, [pc, #16]	; (8002118 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000

0800211c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <LL_RCC_SetSysClkSource+0x24>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 0203 	bic.w	r2, r3, #3
 800212c:	4904      	ldr	r1, [pc, #16]	; (8002140 <LL_RCC_SetSysClkSource+0x24>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000

08002144 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <LL_RCC_GetSysClkSource+0x18>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000

08002160 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <LL_RCC_SetAHBPrescaler+0x24>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	4904      	ldr	r1, [pc, #16]	; (8002184 <LL_RCC_SetAHBPrescaler+0x24>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000

08002188 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <LL_RCC_SetAPB1Prescaler+0x24>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002198:	4904      	ldr	r1, [pc, #16]	; (80021ac <LL_RCC_SetAPB1Prescaler+0x24>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40021000 	.word	0x40021000

080021b0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c0:	4904      	ldr	r1, [pc, #16]	; (80021d4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000

080021d8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4013      	ands	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40021000 	.word	0x40021000

08002208 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	4907      	ldr	r1, [pc, #28]	; (8002234 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4313      	orrs	r3, r2
 800221a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <LL_APB2_GRP1_EnableClock+0x2c>)
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4013      	ands	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40021000 	.word	0x40021000

08002238 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <LL_FLASH_SetLatency+0x24>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 0207 	bic.w	r2, r3, #7
 8002248:	4904      	ldr	r1, [pc, #16]	; (800225c <LL_FLASH_SetLatency+0x24>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40022000 	.word	0x40022000

08002260 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <LL_FLASH_GetLatency+0x18>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000

0800227c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d106      	bne.n	8002298 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <LL_SYSTICK_SetClkSource+0x34>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <LL_SYSTICK_SetClkSource+0x34>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002296:	e005      	b.n	80022a4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <LL_SYSTICK_SetClkSource+0x34>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <LL_SYSTICK_SetClkSource+0x34>)
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <LL_SYSTICK_EnableIT+0x1c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <LL_SYSTICK_EnableIT+0x1c>)
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010
 80022d4:	00000000 	.word	0x00000000

080022d8 <main>:

uint64_t saved_time;
double num_to_display = 10;

int main(void)
{
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80022dc:	2001      	movs	r0, #1
 80022de:	f7ff ff93 	bl	8002208 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80022e2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80022e6:	f7ff ff77 	bl	80021d8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ea:	2003      	movs	r0, #3
 80022ec:	f7ff feba 	bl	8002064 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 80022f0:	f000 f85a 	bl	80023a8 <SystemClock_Config>

  MX_GPIO_Init();
 80022f4:	f7ff fe72 	bl	8001fdc <MX_GPIO_Init>

  setSegments();
 80022f8:	f7ff fa36 	bl	8001768 <setSegments>
  setDigits();
 80022fc:	f7ff fa7f 	bl	80017fe <setDigits>

  LL_mDelay(2000);
 8002300:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002304:	f7ff f98e 	bl	8001624 <LL_mDelay>

  resetDigits();
 8002308:	f7ff fa5c 	bl	80017c4 <resetDigits>
  resetSegments();
 800230c:	f7ff f9fe 	bl	800170c <resetSegments>

  MX_TIM3_Init();
 8002310:	f000 fa62 	bl	80027d8 <MX_TIM3_Init>

  while (1)
  {
	  if(disp_time > (saved_time + 100))
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <main+0xc0>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 800231e:	f143 0500 	adc.w	r5, r3, #0
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <main+0xc4>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	429d      	cmp	r5, r3
 800232a:	bf08      	it	eq
 800232c:	4294      	cmpeq	r4, r2
 800232e:	d2f1      	bcs.n	8002314 <main+0x3c>
	  {
		  displayNumber(num_to_display);
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <main+0xc8>)
 8002332:	ed93 7b00 	vldr	d7, [r3]
 8002336:	eeb0 0a47 	vmov.f32	s0, s14
 800233a:	eef0 0a67 	vmov.f32	s1, s15
 800233e:	f7ff fbb3 	bl	8001aa8 <displayNumber>
	  	  num_to_display -= 0.10;
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <main+0xc8>)
 8002344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002348:	a311      	add	r3, pc, #68	; (adr r3, 8002390 <main+0xb8>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fd ff3f 	bl	80001d0 <__aeabi_dsub>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4912      	ldr	r1, [pc, #72]	; (80023a0 <main+0xc8>)
 8002358:	e9c1 2300 	strd	r2, r3, [r1]
	  	  saved_time = disp_time;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <main+0xc4>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	490d      	ldr	r1, [pc, #52]	; (8002398 <main+0xc0>)
 8002364:	e9c1 2300 	strd	r2, r3, [r1]

	  	  if(num_to_display <= 0)
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <main+0xc8>)
 800236a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	f7fe fb5f 	bl	8000a38 <__aeabi_dcmple>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <main+0xb4>
	  	  {
	  		  num_to_display = 100;
 8002380:	4907      	ldr	r1, [pc, #28]	; (80023a0 <main+0xc8>)
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <main+0xcc>)
 8002388:	e9c1 2300 	strd	r2, r3, [r1]
	  if(disp_time > (saved_time + 100))
 800238c:	e7c2      	b.n	8002314 <main+0x3c>
 800238e:	bf00      	nop
 8002390:	9999999a 	.word	0x9999999a
 8002394:	3fb99999 	.word	0x3fb99999
 8002398:	20000048 	.word	0x20000048
 800239c:	20000038 	.word	0x20000038
 80023a0:	20000000 	.word	0x20000000
 80023a4:	40590000 	.word	0x40590000

080023a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff ff43 	bl	8002238 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80023b2:	f7ff ff55 	bl	8002260 <LL_FLASH_GetLatency>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80023bc:	f000 f82c 	bl	8002418 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80023c0:	f7ff fe74 	bl	80020ac <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80023c4:	bf00      	nop
 80023c6:	f7ff fe81 	bl	80020cc <LL_RCC_HSI_IsReady>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d1fa      	bne.n	80023c6 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80023d0:	2010      	movs	r0, #16
 80023d2:	f7ff fe8d 	bl	80020f0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff fec2 	bl	8002160 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80023dc:	2000      	movs	r0, #0
 80023de:	f7ff fed3 	bl	8002188 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff fee4 	bl	80021b0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff fe97 	bl	800211c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80023ee:	bf00      	nop
 80023f0:	f7ff fea8 	bl	8002144 <LL_RCC_GetSysClkSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1fa      	bne.n	80023f0 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <SystemClock_Config+0x6c>)
 80023fc:	f7ff f904 	bl	8001608 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002400:	2004      	movs	r0, #4
 8002402:	f7ff ff3b 	bl	800227c <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8002406:	f7ff ff55 	bl	80022b4 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 800240a:	4802      	ldr	r0, [pc, #8]	; (8002414 <SystemClock_Config+0x6c>)
 800240c:	f7ff f930 	bl	8001670 <LL_SetSystemCoreClock>
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	007a1200 	.word	0x007a1200

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <HardFault_Handler+0x4>

0800243a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <BusFault_Handler+0x4>

08002446 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <UsageFault_Handler+0x4>

0800244c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SysTick_Handler+0x20>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	1c50      	adds	r0, r2, #1
 8002484:	f143 0100 	adc.w	r1, r3, #0
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <SysTick_Handler+0x20>)
 800248a:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	20000038 	.word	0x20000038

0800249c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <SystemInit+0x84>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <SystemInit+0x84>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <SystemInit+0x88>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <SystemInit+0x88>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <SystemInit+0x88>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4918      	ldr	r1, [pc, #96]	; (8002524 <SystemInit+0x88>)
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <SystemInit+0x8c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <SystemInit+0x88>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <SystemInit+0x88>)
 80024ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <SystemInit+0x88>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a11      	ldr	r2, [pc, #68]	; (8002524 <SystemInit+0x88>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <SystemInit+0x88>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <SystemInit+0x88>)
 80024ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024ee:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <SystemInit+0x88>)
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <SystemInit+0x88>)
 80024f6:	f023 030f 	bic.w	r3, r3, #15
 80024fa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <SystemInit+0x88>)
 80024fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002500:	4908      	ldr	r1, [pc, #32]	; (8002524 <SystemInit+0x88>)
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <SystemInit+0x90>)
 8002504:	4013      	ands	r3, r2
 8002506:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <SystemInit+0x88>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SystemInit+0x84>)
 8002510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002514:	609a      	str	r2, [r3, #8]
#endif
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00
 8002524:	40021000 	.word	0x40021000
 8002528:	f87fc00c 	.word	0xf87fc00c
 800252c:	ff00fccc 	.word	0xff00fccc

08002530 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4907      	ldr	r1, [pc, #28]	; (800257c <NVIC_EnableIRQ+0x30>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da0b      	bge.n	80025ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	; (80025cc <NVIC_SetPriority+0x4c>)
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	3b04      	subs	r3, #4
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025aa:	e009      	b.n	80025c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <NVIC_SetPriority+0x50>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <LL_APB1_GRP1_EnableClock>:
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <LL_APB1_GRP1_EnableClock+0x2c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4313      	orrs	r3, r2
 800264e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4013      	ands	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000

0800266c <LL_TIM_EnableCounter>:
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	601a      	str	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_TIM_EnableARRPreload>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_TIM_OC_DisableFast>:
{
 80026ac:	b4b0      	push	{r4, r5, r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d028      	beq.n	800270e <LL_TIM_OC_DisableFast+0x62>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d023      	beq.n	800270a <LL_TIM_OC_DisableFast+0x5e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d01e      	beq.n	8002706 <LL_TIM_OC_DisableFast+0x5a>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d019      	beq.n	8002702 <LL_TIM_OC_DisableFast+0x56>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d4:	d013      	beq.n	80026fe <LL_TIM_OC_DisableFast+0x52>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026dc:	d00d      	beq.n	80026fa <LL_TIM_OC_DisableFast+0x4e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e4:	d007      	beq.n	80026f6 <LL_TIM_OC_DisableFast+0x4a>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d101      	bne.n	80026f2 <LL_TIM_OC_DisableFast+0x46>
 80026ee:	2307      	movs	r3, #7
 80026f0:	e00e      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00c      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 80026f6:	2306      	movs	r3, #6
 80026f8:	e00a      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e008      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 80026fe:	2304      	movs	r3, #4
 8002700:	e006      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <LL_TIM_OC_DisableFast+0x64>
 800270e:	2300      	movs	r3, #0
 8002710:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3318      	adds	r3, #24
 8002716:	461a      	mov	r2, r3
 8002718:	4629      	mov	r1, r5
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <LL_TIM_OC_DisableFast+0x94>)
 800271c:	5c5b      	ldrb	r3, [r3, r1]
 800271e:	4413      	add	r3, r2
 8002720:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002722:	6822      	ldr	r2, [r4, #0]
 8002724:	4629      	mov	r1, r5
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <LL_TIM_OC_DisableFast+0x98>)
 8002728:	5c5b      	ldrb	r3, [r3, r1]
 800272a:	4619      	mov	r1, r3
 800272c:	2304      	movs	r3, #4
 800272e:	408b      	lsls	r3, r1
 8002730:	43db      	mvns	r3, r3
 8002732:	4013      	ands	r3, r2
 8002734:	6023      	str	r3, [r4, #0]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bcb0      	pop	{r4, r5, r7}
 800273e:	4770      	bx	lr
 8002740:	08002960 	.word	0x08002960
 8002744:	0800296c 	.word	0x0800296c

08002748 <LL_TIM_SetClockSource>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800275a:	f023 0307 	bic.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	609a      	str	r2, [r3, #8]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_TIM_SetTriggerOutput>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_TIM_DisableMasterSlaveMode>:
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_TIM_EnableIT_UPDATE>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08e      	sub	sp, #56	; 0x38
 80027dc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	2220      	movs	r2, #32
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 f89f 	bl	8002938 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80027fa:	2002      	movs	r0, #2
 80027fc:	f7ff ff1e 	bl	800263c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8002800:	f7ff fe96 	bl	8002530 <NVIC_GetPriorityGrouping>
 8002804:	4603      	mov	r3, r0
 8002806:	2202      	movs	r2, #2
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fee2 	bl	80025d4 <NVIC_EncodePriority>
 8002810:	4603      	mov	r3, r0
 8002812:	4619      	mov	r1, r3
 8002814:	201d      	movs	r0, #29
 8002816:	f7ff feb3 	bl	8002580 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800281a:	201d      	movs	r0, #29
 800281c:	f7ff fe96 	bl	800254c <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8002820:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002824:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002826:	2300      	movs	r3, #0
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 800282a:	2313      	movs	r3, #19
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800282e:	2300      	movs	r3, #0
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002836:	4619      	mov	r1, r3
 8002838:	4817      	ldr	r0, [pc, #92]	; (8002898 <MX_TIM3_Init+0xc0>)
 800283a:	f7fe fb3f 	bl	8000ebc <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 800283e:	4816      	ldr	r0, [pc, #88]	; (8002898 <MX_TIM3_Init+0xc0>)
 8002840:	f7ff ff24 	bl	800268c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002844:	2100      	movs	r1, #0
 8002846:	4814      	ldr	r0, [pc, #80]	; (8002898 <MX_TIM3_Init+0xc0>)
 8002848:	f7ff ff7e 	bl	8002748 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800284c:	2310      	movs	r3, #16
 800284e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	461a      	mov	r2, r3
 8002864:	2101      	movs	r1, #1
 8002866:	480c      	ldr	r0, [pc, #48]	; (8002898 <MX_TIM3_Init+0xc0>)
 8002868:	f7fe fb9c 	bl	8000fa4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800286c:	2101      	movs	r1, #1
 800286e:	480a      	ldr	r0, [pc, #40]	; (8002898 <MX_TIM3_Init+0xc0>)
 8002870:	f7ff ff1c 	bl	80026ac <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002874:	2100      	movs	r1, #0
 8002876:	4808      	ldr	r0, [pc, #32]	; (8002898 <MX_TIM3_Init+0xc0>)
 8002878:	f7ff ff7b 	bl	8002772 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800287c:	4806      	ldr	r0, [pc, #24]	; (8002898 <MX_TIM3_Init+0xc0>)
 800287e:	f7ff ff8b 	bl	8002798 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_TIM3_Init+0xc0>)
 8002884:	f7ff ff98 	bl	80027b8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <MX_TIM3_Init+0xc0>)
 800288a:	f7ff feef 	bl	800266c <LL_TIM_EnableCounter>

}
 800288e:	bf00      	nop
 8002890:	3738      	adds	r7, #56	; 0x38
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40000400 	.word	0x40000400

0800289c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800289c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028a2:	e003      	b.n	80028ac <LoopCopyDataInit>

080028a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80028a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80028aa:	3104      	adds	r1, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80028ac:	480b      	ldr	r0, [pc, #44]	; (80028dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80028b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80028b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80028b4:	d3f6      	bcc.n	80028a4 <CopyDataInit>
	ldr	r2, =_sbss
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80028b8:	e002      	b.n	80028c0 <LoopFillZerobss>

080028ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80028ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80028bc:	f842 3b04 	str.w	r3, [r2], #4

080028c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <LoopForever+0x16>)
	cmp	r2, r3
 80028c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80028c4:	d3f9      	bcc.n	80028ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028c6:	f7ff fde9 	bl	800249c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ca:	f000 f811 	bl	80028f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ce:	f7ff fd03 	bl	80022d8 <main>

080028d2 <LoopForever>:

LoopForever:
    b LoopForever
 80028d2:	e7fe      	b.n	80028d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028d4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80028d8:	08002980 	.word	0x08002980
	ldr	r0, =_sdata
 80028dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028e0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80028e4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80028e8:	20000050 	.word	0x20000050

080028ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028ec:	e7fe      	b.n	80028ec <ADC1_2_IRQHandler>
	...

080028f0 <__libc_init_array>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	4d0d      	ldr	r5, [pc, #52]	; (8002928 <__libc_init_array+0x38>)
 80028f4:	4c0d      	ldr	r4, [pc, #52]	; (800292c <__libc_init_array+0x3c>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	2600      	movs	r6, #0
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d109      	bne.n	8002914 <__libc_init_array+0x24>
 8002900:	4d0b      	ldr	r5, [pc, #44]	; (8002930 <__libc_init_array+0x40>)
 8002902:	4c0c      	ldr	r4, [pc, #48]	; (8002934 <__libc_init_array+0x44>)
 8002904:	f000 f820 	bl	8002948 <_init>
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	2600      	movs	r6, #0
 800290e:	42a6      	cmp	r6, r4
 8002910:	d105      	bne.n	800291e <__libc_init_array+0x2e>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	f855 3b04 	ldr.w	r3, [r5], #4
 8002918:	4798      	blx	r3
 800291a:	3601      	adds	r6, #1
 800291c:	e7ee      	b.n	80028fc <__libc_init_array+0xc>
 800291e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002922:	4798      	blx	r3
 8002924:	3601      	adds	r6, #1
 8002926:	e7f2      	b.n	800290e <__libc_init_array+0x1e>
 8002928:	08002978 	.word	0x08002978
 800292c:	08002978 	.word	0x08002978
 8002930:	08002978 	.word	0x08002978
 8002934:	0800297c 	.word	0x0800297c

08002938 <memset>:
 8002938:	4402      	add	r2, r0
 800293a:	4603      	mov	r3, r0
 800293c:	4293      	cmp	r3, r2
 800293e:	d100      	bne.n	8002942 <memset+0xa>
 8002940:	4770      	bx	lr
 8002942:	f803 1b01 	strb.w	r1, [r3], #1
 8002946:	e7f9      	b.n	800293c <memset+0x4>

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
