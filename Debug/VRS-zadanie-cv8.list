
VRS-zadanie-cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001b50  08001b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bb4  08001bb4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001bb4  08001bb4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bb4  08001bb4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bb4  08001bb4  00011bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bb8  08001bb8  00011bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000020  08001bdc  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001bdc  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007191  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013aa  00000000  00000000  000271e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00028590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000498  00000000  00000000  00028ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000384a  00000000  00000000  00028f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004da8  00000000  00000000  0002c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075b90  00000000  00000000  0003154a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a70da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001428  00000000  00000000  000a7130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b38 	.word	0x08001b38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08001b38 	.word	0x08001b38

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001d8:	b480      	push	{r7}
 80001da:	b089      	sub	sp, #36	; 0x24
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	fa93 f3a3 	rbit	r3, r3
 80001f2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	fab3 f383 	clz	r3, r3
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	2103      	movs	r1, #3
 80001fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000202:	43db      	mvns	r3, r3
 8000204:	401a      	ands	r2, r3
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020a:	69fb      	ldr	r3, [r7, #28]
 800020c:	fa93 f3a3 	rbit	r3, r3
 8000210:	61bb      	str	r3, [r7, #24]
  return(result);
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	fab3 f383 	clz	r3, r3
 8000218:	005b      	lsls	r3, r3, #1
 800021a:	6879      	ldr	r1, [r7, #4]
 800021c:	fa01 f303 	lsl.w	r3, r1, r3
 8000220:	431a      	orrs	r2, r3
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	3724      	adds	r7, #36	; 0x24
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000232:	b480      	push	{r7}
 8000234:	b085      	sub	sp, #20
 8000236:	af00      	add	r7, sp, #0
 8000238:	60f8      	str	r0, [r7, #12]
 800023a:	60b9      	str	r1, [r7, #8]
 800023c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	685a      	ldr	r2, [r3, #4]
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	43db      	mvns	r3, r3
 8000246:	401a      	ands	r2, r3
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	fb01 f303 	mul.w	r3, r1, r3
 8000250:	431a      	orrs	r2, r3
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	605a      	str	r2, [r3, #4]
}
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000262:	b480      	push	{r7}
 8000264:	b089      	sub	sp, #36	; 0x24
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	689a      	ldr	r2, [r3, #8]
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	fa93 f3a3 	rbit	r3, r3
 800027c:	613b      	str	r3, [r7, #16]
  return(result);
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	fab3 f383 	clz	r3, r3
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	2103      	movs	r1, #3
 8000288:	fa01 f303 	lsl.w	r3, r1, r3
 800028c:	43db      	mvns	r3, r3
 800028e:	401a      	ands	r2, r3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	61bb      	str	r3, [r7, #24]
  return(result);
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	6879      	ldr	r1, [r7, #4]
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	431a      	orrs	r2, r3
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002b0:	bf00      	nop
 80002b2:	3724      	adds	r7, #36	; 0x24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	fa93 f3a3 	rbit	r3, r3
 80002d6:	613b      	str	r3, [r7, #16]
  return(result);
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	fab3 f383 	clz	r3, r3
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	2103      	movs	r1, #3
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	401a      	ands	r2, r3
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	fa93 f3a3 	rbit	r3, r3
 80002f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002f6:	69bb      	ldr	r3, [r7, #24]
 80002f8:	fab3 f383 	clz	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	431a      	orrs	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	60da      	str	r2, [r3, #12]
}
 800030a:	bf00      	nop
 800030c:	3724      	adds	r7, #36	; 0x24
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000316:	b480      	push	{r7}
 8000318:	b089      	sub	sp, #36	; 0x24
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6a1a      	ldr	r2, [r3, #32]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	fa93 f3a3 	rbit	r3, r3
 8000330:	613b      	str	r3, [r7, #16]
  return(result);
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	fab3 f383 	clz	r3, r3
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	210f      	movs	r1, #15
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	401a      	ands	r2, r3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	fa93 f3a3 	rbit	r3, r3
 800034e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	fab3 f383 	clz	r3, r3
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	431a      	orrs	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000364:	bf00      	nop
 8000366:	3724      	adds	r7, #36	; 0x24
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000370:	b480      	push	{r7}
 8000372:	b089      	sub	sp, #36	; 0x24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	0a1b      	lsrs	r3, r3, #8
 8000384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	fa93 f3a3 	rbit	r3, r3
 800038c:	613b      	str	r3, [r7, #16]
  return(result);
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	fab3 f383 	clz	r3, r3
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	210f      	movs	r1, #15
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	43db      	mvns	r3, r3
 800039e:	401a      	ands	r2, r3
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	0a1b      	lsrs	r3, r3, #8
 80003a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	fa93 f3a3 	rbit	r3, r3
 80003ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	fab3 f383 	clz	r3, r3
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	6879      	ldr	r1, [r7, #4]
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	431a      	orrs	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003c2:	bf00      	nop
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b088      	sub	sp, #32
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	fa93 f3a3 	rbit	r3, r3
 80003ec:	613b      	str	r3, [r7, #16]
  return(result);
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	fab3 f383 	clz	r3, r3
 80003f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003f6:	e048      	b.n	800048a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	2101      	movs	r1, #1
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	4013      	ands	r3, r2
 8000406:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d03a      	beq.n	8000484 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	461a      	mov	r2, r3
 8000414:	69b9      	ldr	r1, [r7, #24]
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff fede 	bl	80001d8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d003      	beq.n	800042c <LL_GPIO_Init+0x5e>
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d106      	bne.n	800043a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	461a      	mov	r2, r3
 8000432:	69b9      	ldr	r1, [r7, #24]
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f7ff ff14 	bl	8000262 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	461a      	mov	r2, r3
 8000440:	69b9      	ldr	r1, [r7, #24]
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff ff3a 	bl	80002bc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d119      	bne.n	8000484 <LL_GPIO_Init+0xb6>
 8000450:	69bb      	ldr	r3, [r7, #24]
 8000452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	fa93 f3a3 	rbit	r3, r3
 800045a:	60bb      	str	r3, [r7, #8]
  return(result);
 800045c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800045e:	fab3 f383 	clz	r3, r3
 8000462:	2b07      	cmp	r3, #7
 8000464:	d807      	bhi.n	8000476 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff51 	bl	8000316 <LL_GPIO_SetAFPin_0_7>
 8000474:	e006      	b.n	8000484 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	461a      	mov	r2, r3
 800047c:	69b9      	ldr	r1, [r7, #24]
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ff76 	bl	8000370 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	fa22 f303 	lsr.w	r3, r2, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1af      	bne.n	80003f8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d003      	beq.n	80004a8 <LL_GPIO_Init+0xda>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d107      	bne.n	80004b8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6819      	ldr	r1, [r3, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	461a      	mov	r2, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff febd 	bl	8000232 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	631a      	str	r2, [r3, #48]	; 0x30
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f043 0201 	orr.w	r2, r3, #1
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	615a      	str	r2, [r3, #20]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <LL_TIM_Init+0xd4>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d007      	beq.n	800060c <LL_TIM_Init+0x2c>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000602:	d003      	beq.n	800060c <LL_TIM_Init+0x2c>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a2c      	ldr	r2, [pc, #176]	; (80006b8 <LL_TIM_Init+0xd8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <LL_TIM_Init+0xd4>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d013      	beq.n	800064a <LL_TIM_Init+0x6a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	d00f      	beq.n	800064a <LL_TIM_Init+0x6a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <LL_TIM_Init+0xd8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d00b      	beq.n	800064a <LL_TIM_Init+0x6a>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <LL_TIM_Init+0xdc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d007      	beq.n	800064a <LL_TIM_Init+0x6a>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <LL_TIM_Init+0xe0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d003      	beq.n	800064a <LL_TIM_Init+0x6a>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <LL_TIM_Init+0xe4>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4313      	orrs	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff3a 	bl	80004de <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff26 	bl	80004c2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <LL_TIM_Init+0xd4>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d00b      	beq.n	8000696 <LL_TIM_Init+0xb6>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <LL_TIM_Init+0xdc>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d007      	beq.n	8000696 <LL_TIM_Init+0xb6>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LL_TIM_Init+0xe0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d003      	beq.n	8000696 <LL_TIM_Init+0xb6>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <LL_TIM_Init+0xe4>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d105      	bne.n	80006a2 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	7c1b      	ldrb	r3, [r3, #16]
 800069a:	4619      	mov	r1, r3
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff2c 	bl	80004fa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff8b 	bl	80005be <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	40000400 	.word	0x40000400
 80006bc:	40014000 	.word	0x40014000
 80006c0:	40014400 	.word	0x40014400
 80006c4:	40014800 	.word	0x40014800

080006c8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006de:	d045      	beq.n	800076c <LL_TIM_OC_Init+0xa4>
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006e6:	d848      	bhi.n	800077a <LL_TIM_OC_Init+0xb2>
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006ee:	d036      	beq.n	800075e <LL_TIM_OC_Init+0x96>
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f6:	d840      	bhi.n	800077a <LL_TIM_OC_Init+0xb2>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006fe:	d027      	beq.n	8000750 <LL_TIM_OC_Init+0x88>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000706:	d838      	bhi.n	800077a <LL_TIM_OC_Init+0xb2>
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800070e:	d018      	beq.n	8000742 <LL_TIM_OC_Init+0x7a>
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000716:	d830      	bhi.n	800077a <LL_TIM_OC_Init+0xb2>
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d003      	beq.n	8000726 <LL_TIM_OC_Init+0x5e>
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b10      	cmp	r3, #16
 8000722:	d007      	beq.n	8000734 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000724:	e029      	b.n	800077a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f000 f82d 	bl	8000788 <OC1Config>
 800072e:	4603      	mov	r3, r0
 8000730:	75fb      	strb	r3, [r7, #23]
      break;
 8000732:	e023      	b.n	800077c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f000 f8a6 	bl	8000888 <OC2Config>
 800073c:	4603      	mov	r3, r0
 800073e:	75fb      	strb	r3, [r7, #23]
      break;
 8000740:	e01c      	b.n	800077c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f000 f923 	bl	8000990 <OC3Config>
 800074a:	4603      	mov	r3, r0
 800074c:	75fb      	strb	r3, [r7, #23]
      break;
 800074e:	e015      	b.n	800077c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f000 f9a0 	bl	8000a98 <OC4Config>
 8000758:	4603      	mov	r3, r0
 800075a:	75fb      	strb	r3, [r7, #23]
      break;
 800075c:	e00e      	b.n	800077c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f000 fa05 	bl	8000b70 <OC5Config>
 8000766:	4603      	mov	r3, r0
 8000768:	75fb      	strb	r3, [r7, #23]
      break;
 800076a:	e007      	b.n	800077c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 fa60 	bl	8000c34 <OC6Config>
 8000774:	4603      	mov	r3, r0
 8000776:	75fb      	strb	r3, [r7, #23]
      break;
 8000778:	e000      	b.n	800077c <LL_TIM_OC_Init+0xb4>
      break;
 800077a:	bf00      	nop
  }

  return result;
 800077c:	7dfb      	ldrb	r3, [r7, #23]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	f023 0201 	bic.w	r2, r3, #1
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f023 0303 	bic.w	r3, r3, #3
 80007c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	6812      	ldr	r2, [r2, #0]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	f023 0202 	bic.w	r2, r3, #2
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f023 0201 	bic.w	r2, r3, #1
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a20      	ldr	r2, [pc, #128]	; (8000878 <OC1Config+0xf0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d00b      	beq.n	8000812 <OC1Config+0x8a>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1f      	ldr	r2, [pc, #124]	; (800087c <OC1Config+0xf4>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d007      	beq.n	8000812 <OC1Config+0x8a>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <OC1Config+0xf8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d003      	beq.n	8000812 <OC1Config+0x8a>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <OC1Config+0xfc>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d11e      	bne.n	8000850 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	f023 0208 	bic.w	r2, r3, #8
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4313      	orrs	r3, r2
 8000820:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	f023 0204 	bic.w	r2, r3, #4
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4313      	orrs	r3, r2
 8000830:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fe57 	bl	8000516 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40012c00 	.word	0x40012c00
 800087c:	40014000 	.word	0x40014000
 8000880:	40014400 	.word	0x40014400
 8000884:	40014800 	.word	0x40014800

08000888 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6a1b      	ldr	r3, [r3, #32]
 80008a2:	f023 0210 	bic.w	r2, r3, #16
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a1b      	ldr	r3, [r3, #32]
 80008ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	0212      	lsls	r2, r2, #8
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f023 0220 	bic.w	r2, r3, #32
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f023 0210 	bic.w	r2, r3, #16
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4313      	orrs	r3, r2
 80008f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a21      	ldr	r2, [pc, #132]	; (8000980 <OC2Config+0xf8>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d00b      	beq.n	8000918 <OC2Config+0x90>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a20      	ldr	r2, [pc, #128]	; (8000984 <OC2Config+0xfc>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d007      	beq.n	8000918 <OC2Config+0x90>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <OC2Config+0x100>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d003      	beq.n	8000918 <OC2Config+0x90>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a1e      	ldr	r2, [pc, #120]	; (800098c <OC2Config+0x104>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d11f      	bne.n	8000958 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	019b      	lsls	r3, r3, #6
 8000924:	4313      	orrs	r3, r2
 8000926:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	019b      	lsls	r3, r3, #6
 8000934:	4313      	orrs	r3, r2
 8000936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fde1 	bl	8000532 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40012c00 	.word	0x40012c00
 8000984:	40014000 	.word	0x40014000
 8000988:	40014400 	.word	0x40014400
 800098c:	40014800 	.word	0x40014800

08000990 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a1b      	ldr	r3, [r3, #32]
 80009aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a1b      	ldr	r3, [r3, #32]
 80009b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f023 0303 	bic.w	r3, r3, #3
 80009ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	4313      	orrs	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	4313      	orrs	r3, r2
 80009fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <OC3Config+0xf8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d00b      	beq.n	8000a1e <OC3Config+0x8e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <OC3Config+0xfc>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d007      	beq.n	8000a1e <OC3Config+0x8e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a1f      	ldr	r2, [pc, #124]	; (8000a90 <OC3Config+0x100>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d003      	beq.n	8000a1e <OC3Config+0x8e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <OC3Config+0x104>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d11f      	bne.n	8000a5e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	029b      	lsls	r3, r3, #10
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	029b      	lsls	r3, r3, #10
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	015b      	lsls	r3, r3, #5
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff fd6c 	bl	800054e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40012c00 	.word	0x40012c00
 8000a8c:	40014000 	.word	0x40014000
 8000a90:	40014400 	.word	0x40014400
 8000a94:	40014800 	.word	0x40014800

08000a98 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ad2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	0212      	lsls	r2, r2, #8
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	031b      	lsls	r3, r3, #12
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	031b      	lsls	r3, r3, #12
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <OC4Config+0xc8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d00b      	beq.n	8000b28 <OC4Config+0x90>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <OC4Config+0xcc>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d007      	beq.n	8000b28 <OC4Config+0x90>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <OC4Config+0xd0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d003      	beq.n	8000b28 <OC4Config+0x90>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <OC4Config+0xd4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d107      	bne.n	8000b38 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	019b      	lsls	r3, r3, #6
 8000b34:	4313      	orrs	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fd0d 	bl	800056a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40012c00 	.word	0x40012c00
 8000b64:	40014000 	.word	0x40014000
 8000b68:	40014400 	.word	0x40014400
 8000b6c:	40014800 	.word	0x40014800

08000b70 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	041b      	lsls	r3, r3, #16
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <OC5Config+0xb4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00b      	beq.n	8000bec <OC5Config+0x7c>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <OC5Config+0xb8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <OC5Config+0x7c>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <OC5Config+0xbc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d003      	beq.n	8000bec <OC5Config+0x7c>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <OC5Config+0xc0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d109      	bne.n	8000c00 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fcba 	bl	8000586 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40012c00 	.word	0x40012c00
 8000c28:	40014000 	.word	0x40014000
 8000c2c:	40014400 	.word	0x40014400
 8000c30:	40014800 	.word	0x40014800

08000c34 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a1b      	ldr	r3, [r3, #32]
 8000c56:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	0212      	lsls	r2, r2, #8
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	051b      	lsls	r3, r3, #20
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	051b      	lsls	r3, r3, #20
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <OC6Config+0xb4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00b      	beq.n	8000cb2 <OC6Config+0x7e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a13      	ldr	r2, [pc, #76]	; (8000cec <OC6Config+0xb8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d007      	beq.n	8000cb2 <OC6Config+0x7e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <OC6Config+0xbc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d003      	beq.n	8000cb2 <OC6Config+0x7e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <OC6Config+0xc0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d109      	bne.n	8000cc6 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	029b      	lsls	r3, r3, #10
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fc65 	bl	80005a2 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40014000 	.word	0x40014000
 8000cf0:	40014400 	.word	0x40014400
 8000cf4:	40014800 	.word	0x40014800

08000cf8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <LL_InitTick+0x30>)
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <LL_InitTick+0x30>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <LL_InitTick+0x30>)
 8000d18:	2205      	movs	r2, #5
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ffdd 	bl	8000cf8 <LL_InitTick>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <LL_mDelay+0x48>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d56:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5e:	d00c      	beq.n	8000d7a <LL_mDelay+0x32>
  {
    Delay++;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000d66:	e008      	b.n	8000d7a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <LL_mDelay+0x48>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <LL_mDelay+0x32>
    {
      Delay--;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f3      	bne.n	8000d68 <LL_mDelay+0x20>
    }
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <LL_SetSystemCoreClock+0x1c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000001c 	.word	0x2000001c

08000db4 <LL_TIM_ClearFlag_UPDATE>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f06f 0201 	mvn.w	r2, #1
 8000dc2:	611a      	str	r2, [r3, #16]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	619a      	str	r2, [r3, #24]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <resetSegments>:
void setDigit(uint8_t pos);


/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f7ff ffdb 	bl	8000df6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f7ff ffd5 	bl	8000df6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	480e      	ldr	r0, [pc, #56]	; (8000e88 <resetSegments+0x58>)
 8000e50:	f7ff ffd1 	bl	8000df6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000e54:	2120      	movs	r1, #32
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <resetSegments+0x58>)
 8000e58:	f7ff ffcd 	bl	8000df6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <resetSegments+0x58>)
 8000e60:	f7ff ffc9 	bl	8000df6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000e64:	2101      	movs	r1, #1
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f7ff ffc4 	bl	8000df6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f7ff ffbf 	bl	8000df6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000e78:	2108      	movs	r1, #8
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f7ff ffba 	bl	8000df6 <LL_GPIO_SetOutputPin>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	48000400 	.word	0x48000400

08000e8c <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f7ff ffbb 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f7ff ffb5 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <setSegments+0x58>)
 8000eac:	f7ff ffb1 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <setSegments+0x58>)
 8000eb4:	f7ff ffad 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000eb8:	2110      	movs	r1, #16
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <setSegments+0x58>)
 8000ebc:	f7ff ffa9 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f7ff ffa4 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000eca:	2102      	movs	r1, #2
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f7ff ff9f 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f7ff ff9a 	bl	8000e12 <LL_GPIO_ResetOutputPin>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000eec:	2104      	movs	r1, #4
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f7ff ff8e 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f7ff ff89 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000f00:	2110      	movs	r1, #16
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f7ff ff84 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f7ff ff7f 	bl	8000e12 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f7ff ff7a 	bl	8000e12 <LL_GPIO_ResetOutputPin>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000f26:	2120      	movs	r1, #32
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f7ff ff63 	bl	8000df6 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000f30:	2110      	movs	r1, #16
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f7ff ff5e 	bl	8000df6 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f7ff ff59 	bl	8000df6 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000f44:	2104      	movs	r1, #4
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f7ff ff54 	bl	8000df6 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f7ff ff4f 	bl	8000df6 <LL_GPIO_SetOutputPin>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <set_sign>:

void set_sign(char sign){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<6))
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	3b30      	subs	r3, #48	; 0x30
 8000f6a:	4a2e      	ldr	r2, [pc, #184]	; (8001024 <set_sign+0xc8>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <set_sign+0x24>
		LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000f76:	2102      	movs	r1, #2
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f7ff ff49 	bl	8000e12 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<5))
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	3b30      	subs	r3, #48	; 0x30
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <set_sign+0xc8>)
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	f003 0320 	and.w	r3, r3, #32
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <set_sign+0x3e>
		LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f90:	2101      	movs	r1, #1
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f7ff ff3c 	bl	8000e12 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<4))
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	3b30      	subs	r3, #48	; 0x30
 8000f9e:	4a21      	ldr	r2, [pc, #132]	; (8001024 <set_sign+0xc8>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <set_sign+0x5a>
		LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f7ff ff2e 	bl	8000e12 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<3))
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3b30      	subs	r3, #48	; 0x30
 8000fba:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <set_sign+0xc8>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <set_sign+0x72>
		LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	4817      	ldr	r0, [pc, #92]	; (8001028 <set_sign+0xcc>)
 8000fca:	f7ff ff22 	bl	8000e12 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<2))
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	3b30      	subs	r3, #48	; 0x30
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <set_sign+0xc8>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <set_sign+0x8e>
		LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f7ff ff14 	bl	8000e12 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<1))
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	3b30      	subs	r3, #48	; 0x30
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <set_sign+0xc8>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <set_sign+0xa8>
		LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f7ff ff07 	bl	8000e12 <LL_GPIO_ResetOutputPin>

	if(seven_seg_digits_decode_abcdefg[sign - '0'] & (1<<0))
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	3b30      	subs	r3, #48	; 0x30
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <set_sign+0xc8>)
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <set_sign+0xc0>
		LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001014:	2110      	movs	r1, #16
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <set_sign+0xcc>)
 8001018:	f7ff fefb 	bl	8000e12 <LL_GPIO_ResetOutputPin>

}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08001b50 	.word	0x08001b50
 8001028:	48000400 	.word	0x48000400

0800102c <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d823      	bhi.n	8001084 <setDigit+0x58>
 800103c:	a201      	add	r2, pc, #4	; (adr r2, 8001044 <setDigit+0x18>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	08001055 	.word	0x08001055
 8001048:	08001061 	.word	0x08001061
 800104c:	0800106d 	.word	0x0800106d
 8001050:	08001079 	.word	0x08001079
	{
	case 0:
		DIGIT_4_ON;
 8001054:	2104      	movs	r1, #4
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f7ff fecc 	bl	8000df6 <LL_GPIO_SetOutputPin>
		break;
 800105e:	e011      	b.n	8001084 <setDigit+0x58>
	case 1:
		DIGIT_3_ON;
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f7ff fec6 	bl	8000df6 <LL_GPIO_SetOutputPin>
		break;
 800106a:	e00b      	b.n	8001084 <setDigit+0x58>
	case 2:
		DIGIT_2_ON;
 800106c:	2110      	movs	r1, #16
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f7ff fec0 	bl	8000df6 <LL_GPIO_SetOutputPin>
		break;
 8001076:	e005      	b.n	8001084 <setDigit+0x58>
	case 3:
		DIGIT_1_ON;
 8001078:	2120      	movs	r1, #32
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f7ff feba 	bl	8000df6 <LL_GPIO_SetOutputPin>
		break;
 8001082:	bf00      	nop
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <display_sign>:
void display_sign(char sign_1,char sign_2, char sign_3,char sign_4)
{
 800108c:	b490      	push	{r4, r7}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4604      	mov	r4, r0
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4623      	mov	r3, r4
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4603      	mov	r3, r0
 80010a0:	71bb      	strb	r3, [r7, #6]
 80010a2:	460b      	mov	r3, r1
 80010a4:	717b      	strb	r3, [r7, #5]
 80010a6:	4613      	mov	r3, r2
 80010a8:	713b      	strb	r3, [r7, #4]
	Display_sign[0] = sign_1;
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <display_sign+0x40>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	7013      	strb	r3, [r2, #0]
	Display_sign[1] = sign_2;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <display_sign+0x40>)
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	7053      	strb	r3, [r2, #1]
	Display_sign[2] = sign_3;
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <display_sign+0x40>)
 80010b8:	797b      	ldrb	r3, [r7, #5]
 80010ba:	7093      	strb	r3, [r2, #2]
	Display_sign[3] = sign_4;
 80010bc:	4a03      	ldr	r2, [pc, #12]	; (80010cc <display_sign+0x40>)
 80010be:	793b      	ldrb	r3, [r7, #4]
 80010c0:	70d3      	strb	r3, [r2, #3]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc90      	pop	{r4, r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000054 	.word	0x20000054

080010d0 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e026      	b.n	800112a <updateDisplay+0x5a>
	{

		setDigit(i);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ffa4 	bl	800102c <setDigit>
		set_sign(Display_sign[3-i]);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f1c3 0303 	rsb	r3, r3, #3
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <updateDisplay+0x6c>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff34 	bl	8000f5c <set_sign>

		disp_time_saved = disp_time;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <updateDisplay+0x70>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	4912      	ldr	r1, [pc, #72]	; (8001144 <updateDisplay+0x74>)
 80010fc:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8001100:	bf00      	nop
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <updateDisplay+0x74>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	1c94      	adds	r4, r2, #2
 800110a:	f143 0500 	adc.w	r5, r3, #0
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <updateDisplay+0x70>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	42ab      	cmp	r3, r5
 8001116:	bf08      	it	eq
 8001118:	42a2      	cmpeq	r2, r4
 800111a:	d3f2      	bcc.n	8001102 <updateDisplay+0x32>

		resetDigits();
 800111c:	f7ff fee4 	bl	8000ee8 <resetDigits>
		resetSegments();
 8001120:	f7ff fe86 	bl	8000e30 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d9d5      	bls.n	80010dc <updateDisplay+0xc>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bdb0      	pop	{r4, r5, r7, pc}
 800113a:	bf00      	nop
 800113c:	20000054 	.word	0x20000054
 8001140:	20000040 	.word	0x20000040
 8001144:	20000048 	.word	0x20000048

08001148 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <TIM3_IRQHandler+0x20>)
 800114e:	f7ff fe3f 	bl	8000dd0 <LL_TIM_IsActiveFlag_UPDATE>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8001158:	f7ff ffba 	bl	80010d0 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM3_IRQHandler+0x20>)
 800115e:	f7ff fe29 	bl	8000db4 <LL_TIM_ClearFlag_UPDATE>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40000400 	.word	0x40000400

0800116c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4313      	orrs	r3, r2
 800117e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4013      	ands	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000

0800119c <LL_GPIO_ResetOutputPin>:
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011d2:	f7ff ffcb 	bl	800116c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80011da:	f7ff ffc7 	bl	800116c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 80011de:	f640 111b 	movw	r1, #2331	; 0x91b
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f7ff ffd9 	bl	800119c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80011ea:	2132      	movs	r1, #50	; 0x32
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <MX_GPIO_Init+0x84>)
 80011ee:	f7ff ffd5 	bl	800119c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 80011f2:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80011f6:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011f8:	2301      	movs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f7ff f8dd 	bl	80003ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001214:	2332      	movs	r3, #50	; 0x32
 8001216:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001218:	2301      	movs	r3, #1
 800121a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <MX_GPIO_Init+0x84>)
 800122e:	f7ff f8ce 	bl	80003ce <LL_GPIO_Init>

}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	48000400 	.word	0x48000400

08001240 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <NVIC_SetPriorityGrouping+0x44>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <NVIC_SetPriorityGrouping+0x44>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_RCC_HSI_Enable+0x1c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <LL_RCC_HSI_Enable+0x1c>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_RCC_HSI_IsReady+0x20>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000

080012cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4904      	ldr	r1, [pc, #16]	; (80012f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <LL_RCC_SetSysClkSource+0x24>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 0203 	bic.w	r2, r3, #3
 8001308:	4904      	ldr	r1, [pc, #16]	; (800131c <LL_RCC_SetSysClkSource+0x24>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000

08001320 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <LL_RCC_GetSysClkSource+0x18>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <LL_RCC_SetAHBPrescaler+0x24>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <LL_RCC_SetAHBPrescaler+0x24>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000

08001364 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <LL_RCC_SetAPB1Prescaler+0x24>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000

0800138c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800139c:	4904      	ldr	r1, [pc, #16]	; (80013b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000

080013b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000

080013e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000

08001414 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <LL_FLASH_SetLatency+0x24>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 0207 	bic.w	r2, r3, #7
 8001424:	4904      	ldr	r1, [pc, #16]	; (8001438 <LL_FLASH_SetLatency+0x24>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40022000 	.word	0x40022000

0800143c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <LL_FLASH_GetLatency+0x18>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000

08001458 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d106      	bne.n	8001474 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001472:	e005      	b.n	8001480 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 800147a:	f023 0304 	bic.w	r3, r3, #4
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e010 	.word	0xe000e010

08001490 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <LL_SYSTICK_EnableIT+0x1c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <LL_SYSTICK_EnableIT+0x1c>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <main>:
//char display_text[]="aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"; //test string
int act_index=0, right=1;


int main(void)
{
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff ff95 	bl	80013e4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80014be:	f7ff ff79 	bl	80013b4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f7ff febc 	bl	8001240 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 80014c8:	f000 f866 	bl	8001598 <SystemClock_Config>

  MX_GPIO_Init();
 80014cc:	f7ff fe74 	bl	80011b8 <MX_GPIO_Init>

  setSegments();
 80014d0:	f7ff fcdc 	bl	8000e8c <setSegments>
  setDigits();
 80014d4:	f7ff fd25 	bl	8000f22 <setDigits>

  LL_mDelay(2000);
 80014d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014dc:	f7ff fc34 	bl	8000d48 <LL_mDelay>

  resetDigits();
 80014e0:	f7ff fd02 	bl	8000ee8 <resetDigits>
  resetSegments();
 80014e4:	f7ff fca4 	bl	8000e30 <resetSegments>

  MX_TIM3_Init();
 80014e8:	f000 fa6e 	bl	80019c8 <MX_TIM3_Init>

  while (1)
  {
	  if(disp_time > (saved_time + 500))
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <main+0xd4>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f512 74fa 	adds.w	r4, r2, #500	; 0x1f4
 80014f6:	f143 0500 	adc.w	r5, r3, #0
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <main+0xd8>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	429d      	cmp	r5, r3
 8001502:	bf08      	it	eq
 8001504:	4294      	cmpeq	r4, r2
 8001506:	d2f1      	bcs.n	80014ec <main+0x3c>
	  {

		  display_sign(display_text[act_index],display_text[act_index+1],display_text[act_index+2],display_text[act_index+3]);
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <main+0xdc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a20      	ldr	r2, [pc, #128]	; (8001590 <main+0xe0>)
 800150e:	5cd0      	ldrb	r0, [r2, r3]
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <main+0xdc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <main+0xe0>)
 8001518:	5cd1      	ldrb	r1, [r2, r3]
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <main+0xdc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3302      	adds	r3, #2
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <main+0xe0>)
 8001522:	5cd2      	ldrb	r2, [r2, r3]
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <main+0xdc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3303      	adds	r3, #3
 800152a:	4e19      	ldr	r6, [pc, #100]	; (8001590 <main+0xe0>)
 800152c:	5cf3      	ldrb	r3, [r6, r3]
 800152e:	f7ff fdad 	bl	800108c <display_sign>
	  	  saved_time = disp_time;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <main+0xd8>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	4912      	ldr	r1, [pc, #72]	; (8001584 <main+0xd4>)
 800153a:	e9c1 2300 	strd	r2, r3, [r1]

	  	  if(right){ //urcovanie smeru
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <main+0xe4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <main+0xa2>
	  		  act_index++;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <main+0xdc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a0f      	ldr	r2, [pc, #60]	; (800158c <main+0xdc>)
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e004      	b.n	800155c <main+0xac>
	  	  } else {
	  		  act_index--;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <main+0xdc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3b01      	subs	r3, #1
 8001558:	4a0c      	ldr	r2, [pc, #48]	; (800158c <main+0xdc>)
 800155a:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if(act_index == strlen(display_text)-4) { //17 velkost zobrazovaneho textu, ak dojde nakoniec zmeni smer
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <main+0xe0>)
 800155e:	f7fe fe33 	bl	80001c8 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	3b04      	subs	r3, #4
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <main+0xdc>)
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	4293      	cmp	r3, r2
 800156c:	d102      	bne.n	8001574 <main+0xc4>
	  		  right = 0;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <main+0xe4>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if (act_index == 0){
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <main+0xdc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1b7      	bne.n	80014ec <main+0x3c>
	  		  right = 1;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <main+0xe4>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
	  if(disp_time > (saved_time + 500))
 8001582:	e7b3      	b.n	80014ec <main+0x3c>
 8001584:	20000058 	.word	0x20000058
 8001588:	20000040 	.word	0x20000040
 800158c:	20000050 	.word	0x20000050
 8001590:	20000000 	.word	0x20000000
 8001594:	20000018 	.word	0x20000018

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ff39 	bl	8001414 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80015a2:	f7ff ff4b 	bl	800143c <LL_FLASH_GetLatency>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80015ac:	f000 f82c 	bl	8001608 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80015b0:	f7ff fe6a 	bl	8001288 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80015b4:	bf00      	nop
 80015b6:	f7ff fe77 	bl	80012a8 <LL_RCC_HSI_IsReady>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d1fa      	bne.n	80015b6 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff fe83 	bl	80012cc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff feb8 	bl	800133c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fec9 	bl	8001364 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff feda 	bl	800138c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fe8d 	bl	80012f8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80015de:	bf00      	nop
 80015e0:	f7ff fe9e 	bl	8001320 <LL_RCC_GetSysClkSource>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1fa      	bne.n	80015e0 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <SystemClock_Config+0x6c>)
 80015ec:	f7ff fb9e 	bl	8000d2c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80015f0:	2004      	movs	r0, #4
 80015f2:	f7ff ff31 	bl	8001458 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 80015f6:	f7ff ff4b 	bl	8001490 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 80015fa:	4802      	ldr	r0, [pc, #8]	; (8001604 <SystemClock_Config+0x6c>)
 80015fc:	f7ff fbca 	bl	8000d94 <LL_SetSystemCoreClock>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	007a1200 	.word	0x007a1200

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <HardFault_Handler+0x4>

0800162a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <MemManage_Handler+0x4>

08001630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <BusFault_Handler+0x4>

08001636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <UsageFault_Handler+0x4>

0800163c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SysTick_Handler+0x20>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	1c50      	adds	r0, r2, #1
 8001674:	f143 0100 	adc.w	r1, r3, #0
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <SysTick_Handler+0x20>)
 800167a:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20000040 	.word	0x20000040

0800168c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <SystemInit+0x84>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <SystemInit+0x84>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <SystemInit+0x88>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <SystemInit+0x88>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <SystemInit+0x88>)
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4918      	ldr	r1, [pc, #96]	; (8001714 <SystemInit+0x88>)
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <SystemInit+0x8c>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <SystemInit+0x88>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a15      	ldr	r2, [pc, #84]	; (8001714 <SystemInit+0x88>)
 80016be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <SystemInit+0x88>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a11      	ldr	r2, [pc, #68]	; (8001714 <SystemInit+0x88>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <SystemInit+0x88>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <SystemInit+0x88>)
 80016da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016de:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <SystemInit+0x88>)
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <SystemInit+0x88>)
 80016e6:	f023 030f 	bic.w	r3, r3, #15
 80016ea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <SystemInit+0x88>)
 80016ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f0:	4908      	ldr	r1, [pc, #32]	; (8001714 <SystemInit+0x88>)
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <SystemInit+0x90>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x88>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SystemInit+0x84>)
 8001700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001704:	609a      	str	r2, [r3, #8]
#endif
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00
 8001714:	40021000 	.word	0x40021000
 8001718:	f87fc00c 	.word	0xf87fc00c
 800171c:	ff00fccc 	.word	0xff00fccc

08001720 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <NVIC_EnableIRQ+0x30>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da0b      	bge.n	800179c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <NVIC_SetPriority+0x4c>)
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	3b04      	subs	r3, #4
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179a:	e009      	b.n	80017b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <NVIC_SetPriority+0x50>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <LL_APB1_GRP1_EnableClock>:
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <LL_APB1_GRP1_EnableClock+0x2c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_TIM_EnableCounter>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_TIM_EnableARRPreload>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_TIM_OC_DisableFast>:
{
 800189c:	b4b0      	push	{r4, r5, r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d028      	beq.n	80018fe <LL_TIM_OC_DisableFast+0x62>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d023      	beq.n	80018fa <LL_TIM_OC_DisableFast+0x5e>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d01e      	beq.n	80018f6 <LL_TIM_OC_DisableFast+0x5a>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d019      	beq.n	80018f2 <LL_TIM_OC_DisableFast+0x56>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c4:	d013      	beq.n	80018ee <LL_TIM_OC_DisableFast+0x52>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018cc:	d00d      	beq.n	80018ea <LL_TIM_OC_DisableFast+0x4e>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d4:	d007      	beq.n	80018e6 <LL_TIM_OC_DisableFast+0x4a>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d101      	bne.n	80018e2 <LL_TIM_OC_DisableFast+0x46>
 80018de:	2307      	movs	r3, #7
 80018e0:	e00e      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018e2:	2308      	movs	r3, #8
 80018e4:	e00c      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e00a      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e008      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e006      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <LL_TIM_OC_DisableFast+0x64>
 80018fe:	2300      	movs	r3, #0
 8001900:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3318      	adds	r3, #24
 8001906:	461a      	mov	r2, r3
 8001908:	4629      	mov	r1, r5
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <LL_TIM_OC_DisableFast+0x94>)
 800190c:	5c5b      	ldrb	r3, [r3, r1]
 800190e:	4413      	add	r3, r2
 8001910:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	4629      	mov	r1, r5
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <LL_TIM_OC_DisableFast+0x98>)
 8001918:	5c5b      	ldrb	r3, [r3, r1]
 800191a:	4619      	mov	r1, r3
 800191c:	2304      	movs	r3, #4
 800191e:	408b      	lsls	r3, r1
 8001920:	43db      	mvns	r3, r3
 8001922:	4013      	ands	r3, r2
 8001924:	6023      	str	r3, [r4, #0]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bcb0      	pop	{r4, r5, r7}
 800192e:	4770      	bx	lr
 8001930:	08001b9c 	.word	0x08001b9c
 8001934:	08001ba8 	.word	0x08001ba8

08001938 <LL_TIM_SetClockSource>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800194a:	f023 0307 	bic.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_TIM_SetTriggerOutput>:
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	605a      	str	r2, [r3, #4]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_TIM_DisableMasterSlaveMode>:
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_TIM_EnableIT_UPDATE>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08e      	sub	sp, #56	; 0x38
 80019cc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2220      	movs	r2, #32
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f89f 	bl	8001b28 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80019ea:	2002      	movs	r0, #2
 80019ec:	f7ff ff1e 	bl	800182c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80019f0:	f7ff fe96 	bl	8001720 <NVIC_GetPriorityGrouping>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2202      	movs	r2, #2
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fee2 	bl	80017c4 <NVIC_EncodePriority>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	201d      	movs	r0, #29
 8001a06:	f7ff feb3 	bl	8001770 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001a0a:	201d      	movs	r0, #29
 8001a0c:	f7ff fe96 	bl	800173c <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8001a10:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001a14:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 8001a1a:	2313      	movs	r3, #19
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	4817      	ldr	r0, [pc, #92]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a2a:	f7fe fdd9 	bl	80005e0 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8001a2e:	4816      	ldr	r0, [pc, #88]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a30:	f7ff ff24 	bl	800187c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001a34:	2100      	movs	r1, #0
 8001a36:	4814      	ldr	r0, [pc, #80]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a38:	f7ff ff7e 	bl	8001938 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	461a      	mov	r2, r3
 8001a54:	2101      	movs	r1, #1
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a58:	f7fe fe36 	bl	80006c8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	480a      	ldr	r0, [pc, #40]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a60:	f7ff ff1c 	bl	800189c <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001a64:	2100      	movs	r1, #0
 8001a66:	4808      	ldr	r0, [pc, #32]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a68:	f7ff ff7b 	bl	8001962 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a6e:	f7ff ff8b 	bl	8001988 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a74:	f7ff ff98 	bl	80019a8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM3_Init+0xc0>)
 8001a7a:	f7ff feef 	bl	800185c <LL_TIM_EnableCounter>

}
 8001a7e:	bf00      	nop
 8001a80:	3738      	adds	r7, #56	; 0x38
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40000400 	.word	0x40000400

08001a8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a92:	e003      	b.n	8001a9c <LoopCopyDataInit>

08001a94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a9a:	3104      	adds	r1, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001aa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001aa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001aa4:	d3f6      	bcc.n	8001a94 <CopyDataInit>
	ldr	r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001aa8:	e002      	b.n	8001ab0 <LoopFillZerobss>

08001aaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aac:	f842 3b04 	str.w	r3, [r2], #4

08001ab0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <LoopForever+0x16>)
	cmp	r2, r3
 8001ab2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ab4:	d3f9      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ab6:	f7ff fde9 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f000 f811 	bl	8001ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001abe:	f7ff fcf7 	bl	80014b0 <main>

08001ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ac2:	e7fe      	b.n	8001ac2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ac4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001ac8:	08001bbc 	.word	0x08001bbc
	ldr	r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ad0:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8001ad4:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8001ad8:	20000060 	.word	0x20000060

08001adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC1_2_IRQHandler>
	...

08001ae0 <__libc_init_array>:
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	4d0d      	ldr	r5, [pc, #52]	; (8001b18 <__libc_init_array+0x38>)
 8001ae4:	4c0d      	ldr	r4, [pc, #52]	; (8001b1c <__libc_init_array+0x3c>)
 8001ae6:	1b64      	subs	r4, r4, r5
 8001ae8:	10a4      	asrs	r4, r4, #2
 8001aea:	2600      	movs	r6, #0
 8001aec:	42a6      	cmp	r6, r4
 8001aee:	d109      	bne.n	8001b04 <__libc_init_array+0x24>
 8001af0:	4d0b      	ldr	r5, [pc, #44]	; (8001b20 <__libc_init_array+0x40>)
 8001af2:	4c0c      	ldr	r4, [pc, #48]	; (8001b24 <__libc_init_array+0x44>)
 8001af4:	f000 f820 	bl	8001b38 <_init>
 8001af8:	1b64      	subs	r4, r4, r5
 8001afa:	10a4      	asrs	r4, r4, #2
 8001afc:	2600      	movs	r6, #0
 8001afe:	42a6      	cmp	r6, r4
 8001b00:	d105      	bne.n	8001b0e <__libc_init_array+0x2e>
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
 8001b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b08:	4798      	blx	r3
 8001b0a:	3601      	adds	r6, #1
 8001b0c:	e7ee      	b.n	8001aec <__libc_init_array+0xc>
 8001b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b12:	4798      	blx	r3
 8001b14:	3601      	adds	r6, #1
 8001b16:	e7f2      	b.n	8001afe <__libc_init_array+0x1e>
 8001b18:	08001bb4 	.word	0x08001bb4
 8001b1c:	08001bb4 	.word	0x08001bb4
 8001b20:	08001bb4 	.word	0x08001bb4
 8001b24:	08001bb8 	.word	0x08001bb8

08001b28 <memset>:
 8001b28:	4402      	add	r2, r0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d100      	bne.n	8001b32 <memset+0xa>
 8001b30:	4770      	bx	lr
 8001b32:	f803 1b01 	strb.w	r1, [r3], #1
 8001b36:	e7f9      	b.n	8001b2c <memset+0x4>

08001b38 <_init>:
 8001b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3a:	bf00      	nop
 8001b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b3e:	bc08      	pop	{r3}
 8001b40:	469e      	mov	lr, r3
 8001b42:	4770      	bx	lr

08001b44 <_fini>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	bf00      	nop
 8001b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4a:	bc08      	pop	{r3}
 8001b4c:	469e      	mov	lr, r3
 8001b4e:	4770      	bx	lr
